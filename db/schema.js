const { SchemaTypes } = require("mongoose")
const mongoose = require("mongoose")



// declare User schema for database
const User = new mongoose.Schema({
    name: {
        type: String,
    },
    username: {
        type: String,
        required: true
    },
    email: {
        type: String,
        select: false
    },
    password: {
        type: String,
        required: true,
        select: false
    },
    profile_picture:{
        type: Object({
            data: Buffer,
            contentType: String
        }),
        default: {
            data: Buffer.from([137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,96,0,0,0,96,8,6,0,0,0,226,152,119,56,0,0,0,9,112,72,89,115,0,0,11,19,0,0,11,19,1,0,154,156,24,0,0,9,38,73,68,65,84,120,156,237,93,9,108,21,101,16,254,30,5,91,13,180,17,17,16,212,114,138,202,37,30,137,65,35,160,68,185,172,162,98,72,212,10,130,138,55,8,65,110,143,40,146,120,69,19,84,238,203,112,121,16,53,162,96,69,20,16,16,52,66,85,84,16,80,4,37,156,2,98,169,180,53,67,230,37,47,147,217,119,236,254,255,238,190,118,191,100,147,151,246,237,204,252,255,219,255,159,249,231,90,32,66,132,8,17,34,68,136,16,33,66,248,208,28,64,31,0,195,1,76,5,176,18,64,41,128,237,0,14,2,40,7,112,130,63,111,231,255,173,228,239,210,61,189,1,52,11,122,16,217,132,38,0,138,1,204,6,240,27,128,42,67,23,209,154,5,224,46,0,231,4,61,200,176,225,116,0,253,0,124,8,224,164,193,73,119,186,42,0,172,6,112,31,128,122,168,193,104,3,96,6,128,127,124,152,116,167,235,24,203,112,1,106,16,58,2,88,196,79,98,85,26,19,244,25,128,215,1,60,6,160,7,128,118,172,27,206,4,80,7,192,105,252,185,57,255,143,190,51,148,239,89,193,52,210,89,21,11,1,116,64,53,70,99,0,243,0,84,38,153,136,74,222,30,198,1,184,138,39,216,43,136,198,213,0,198,3,88,147,6,255,185,0,26,161,26,161,22,43,214,253,41,148,228,36,0,173,124,144,231,60,0,79,0,248,37,137,60,135,120,197,229,32,203,65,219,194,250,36,3,93,15,160,8,64,44,0,217,136,231,205,0,190,78,34,223,218,108,54,99,111,225,39,201,105,226,187,35,60,184,30,192,6,7,89,15,242,15,149,53,160,101,251,170,195,96,14,176,249,71,219,82,216,64,50,13,225,9,215,116,195,203,217,176,37,229,1,88,226,48,249,11,0,52,64,248,113,54,91,105,218,24,222,1,144,139,144,162,46,128,229,138,208,255,178,66,203,54,20,59,156,81,200,213,81,128,144,129,4,250,86,17,118,107,150,219,214,29,1,108,83,198,245,77,152,126,4,218,118,190,80,132,220,8,160,33,178,31,141,120,194,181,149,64,99,15,20,57,188,47,74,225,232,4,154,143,234,131,186,0,150,41,227,124,31,64,237,32,5,211,172,157,146,48,43,42,15,200,101,183,136,28,47,89,71,129,217,249,218,182,99,211,195,120,33,187,41,104,34,246,112,44,224,4,127,166,31,126,44,59,249,108,33,95,209,117,100,162,222,132,0,78,184,135,20,133,107,107,207,111,197,238,234,100,126,156,196,9,161,173,161,165,69,159,214,175,202,97,173,16,62,238,251,235,132,0,199,1,180,183,228,46,24,207,166,108,170,137,215,204,223,177,150,220,28,151,40,50,125,229,215,1,243,17,101,176,131,45,253,208,211,93,76,188,188,230,25,242,170,74,60,160,240,162,191,89,5,45,191,195,130,233,124,11,124,98,0,222,78,226,32,123,8,64,91,222,147,243,57,14,240,176,178,50,227,215,98,75,43,97,177,178,21,89,53,189,231,41,190,29,27,238,133,225,202,36,238,6,112,91,26,247,246,99,165,44,239,31,102,65,206,134,138,46,164,120,182,181,83,161,84,130,228,88,51,141,203,216,178,73,228,243,19,251,241,211,197,249,124,79,34,13,162,217,201,130,188,15,42,70,0,173,72,227,88,164,184,148,109,40,157,79,4,159,191,92,102,50,208,61,123,5,173,143,44,233,170,141,182,183,229,54,74,12,215,134,63,255,10,229,105,34,95,189,91,244,80,232,209,10,51,13,201,135,178,59,90,155,100,48,67,121,250,109,96,142,224,179,212,0,77,233,66,160,252,32,27,144,1,157,105,166,8,215,83,50,11,108,156,252,98,188,221,36,242,233,98,128,110,55,65,115,143,37,139,168,175,224,115,148,125,72,158,49,64,57,241,218,24,192,165,130,207,62,67,58,38,71,73,8,160,131,148,105,196,148,19,50,197,20,60,99,133,32,58,1,118,112,143,224,67,74,223,20,228,153,130,30,42,27,120,90,240,249,212,43,193,166,66,249,146,18,107,1,59,24,37,132,159,104,144,246,243,130,54,165,165,216,64,107,97,170,87,240,225,213,53,138,133,224,148,52,101,11,175,8,94,148,221,102,10,67,5,109,226,101,11,107,5,175,59,188,16,155,45,136,145,43,56,27,127,128,97,130,246,75,176,135,167,4,47,242,103,185,198,78,65,172,51,236,97,148,224,245,156,65,218,147,4,237,145,176,135,46,130,23,205,161,107,159,127,34,161,99,150,188,138,113,12,172,6,74,56,30,57,147,217,20,174,98,5,125,4,17,178,134,108,162,147,69,51,244,128,160,77,126,45,155,88,41,248,245,50,225,145,164,116,111,155,136,1,248,83,240,236,106,128,238,181,62,29,196,18,241,166,9,79,236,84,65,196,143,228,170,217,130,39,57,230,188,66,38,139,205,132,125,72,165,79,63,136,231,101,68,14,39,219,184,92,240,244,202,183,151,160,85,105,201,37,157,138,175,171,237,187,84,16,177,226,227,86,176,84,240,221,235,210,29,221,68,113,71,83,96,223,15,116,16,124,55,155,48,65,253,138,250,119,114,8,200,80,144,37,93,144,172,63,11,26,101,62,40,95,39,11,114,135,27,34,210,129,117,22,252,195,80,101,43,34,229,121,123,26,247,246,87,148,185,95,58,44,142,6,130,55,205,101,198,144,79,33,21,195,249,133,88,146,20,241,245,156,153,209,158,19,100,11,248,243,163,73,170,93,22,250,92,133,147,171,172,190,140,241,159,32,226,119,14,100,142,98,137,185,185,230,4,32,123,29,33,3,85,244,103,140,35,130,72,16,69,205,49,0,163,57,241,43,211,137,63,206,94,207,32,234,207,242,133,44,127,187,33,34,45,136,32,75,55,91,112,186,97,186,169,137,75,88,17,6,133,198,66,38,138,244,101,140,45,130,136,141,212,195,76,65,21,237,99,56,208,241,7,239,173,101,252,121,57,175,22,63,74,93,83,161,163,152,187,31,221,16,41,9,224,32,86,93,208,91,204,29,61,28,158,221,2,54,146,176,170,43,134,152,200,196,24,39,136,188,102,94,206,106,139,201,98,238,104,219,204,24,69,130,200,231,230,229,172,182,88,37,230,142,92,251,158,143,211,71,2,170,135,42,0,112,3,63,69,11,184,225,198,110,206,68,174,224,44,180,131,252,183,53,156,22,56,154,51,234,130,168,83,171,163,228,81,185,118,227,200,44,227,43,225,15,154,112,60,98,165,114,32,204,228,42,103,26,143,251,216,41,171,179,144,129,44,52,215,152,111,98,47,203,0,215,113,2,173,141,206,89,39,217,27,74,153,114,54,49,86,240,125,203,11,177,193,130,24,249,90,108,160,91,138,174,37,166,175,117,134,210,30,53,200,154,226,65,94,79,116,50,49,203,164,91,186,105,146,222,18,242,32,51,5,192,253,60,113,241,142,89,49,190,226,29,179,186,240,119,166,40,7,73,237,122,151,183,59,83,104,169,172,58,207,30,4,89,5,79,75,204,4,138,147,180,179,137,251,208,199,120,252,193,11,89,151,108,74,194,135,20,248,157,134,198,244,164,13,203,81,86,128,236,244,216,182,37,143,83,183,171,28,174,101,124,146,52,93,252,209,85,41,254,72,188,166,120,44,48,39,11,113,151,160,73,7,50,35,102,160,169,244,244,250,92,206,169,77,192,54,158,120,219,184,81,201,98,142,95,171,120,59,51,81,184,126,212,164,25,60,205,64,129,6,237,181,223,59,152,138,19,124,110,124,145,199,41,132,154,137,91,234,50,161,118,163,178,162,140,161,157,226,10,238,145,97,136,78,155,252,253,62,152,133,169,114,134,180,102,130,155,121,181,186,117,190,85,112,25,173,81,188,39,152,108,74,83,23,228,57,52,238,43,181,152,234,158,169,229,242,131,34,223,154,52,117,66,142,146,65,66,169,144,86,178,21,42,93,40,25,233,85,173,226,122,170,124,132,7,5,14,61,129,166,187,168,152,175,176,153,125,33,139,232,168,247,102,50,12,114,80,182,97,108,228,212,216,65,57,223,157,226,190,173,62,21,1,158,66,35,142,111,198,153,145,3,204,9,205,196,119,227,9,183,97,238,211,220,82,41,20,60,156,34,39,105,143,176,124,172,251,156,250,242,1,234,16,231,224,164,155,225,86,201,74,47,236,232,174,108,181,20,143,118,66,255,132,249,160,185,241,5,181,82,184,166,101,225,178,235,4,213,128,160,165,195,36,43,76,175,29,166,94,168,228,155,249,78,8,255,123,200,148,110,58,74,89,158,106,73,73,103,5,100,102,176,151,147,115,144,144,133,215,85,30,219,38,248,134,18,159,92,216,126,172,228,13,138,159,42,212,40,84,154,122,248,166,152,44,224,86,197,198,207,36,75,219,119,200,104,208,174,160,251,106,122,68,109,14,41,218,112,199,91,193,10,197,215,222,19,217,139,158,74,55,117,106,153,25,90,188,161,40,174,10,238,161,16,250,214,239,9,32,89,159,113,120,207,141,237,98,69,79,160,12,234,143,21,161,227,109,14,168,241,106,216,113,17,59,226,180,49,44,205,134,87,95,209,211,243,162,195,0,202,56,227,46,140,173,141,115,185,71,105,153,131,236,47,100,217,42,62,21,243,117,122,133,212,78,118,114,229,4,45,36,203,48,64,169,137,75,244,239,152,138,25,7,226,220,90,237,48,176,42,14,210,12,12,168,13,124,30,247,40,210,98,1,241,235,203,144,196,44,60,63,97,35,83,188,49,111,31,247,7,50,30,69,82,208,150,251,7,237,75,34,15,173,220,17,97,242,239,152,202,1,154,149,198,27,244,182,0,120,22,192,53,252,158,73,175,56,131,243,133,38,42,189,68,53,139,109,166,225,92,161,208,161,83,6,157,208,203,185,1,210,100,46,255,47,226,39,184,48,225,85,134,117,248,115,51,254,95,17,127,119,50,103,192,149,167,193,135,38,254,3,31,235,136,67,129,86,252,2,136,32,95,230,89,198,175,46,188,24,53,24,245,185,250,166,196,167,215,217,158,100,94,247,102,152,249,80,35,208,136,19,130,231,114,106,162,169,73,223,206,241,236,65,33,141,71,135,22,231,242,107,4,71,112,68,173,132,77,215,29,9,175,52,47,231,207,59,248,127,37,252,221,17,28,135,32,26,17,34,68,136,16,33,66,132,8,17,16,38,252,15,67,20,236,243,96,151,135,82,0,0,0,0,73,69,78,68,174,66,96,130]),
            contentType: "image/png"
        }
    },
    about:{
        type: String
    }
} , {timestamps: true})





// twitter users collection this saves in user collection
const TwitterUser = new mongoose.Schema({
    twitterId: {
        type: String
    },
    username:{
        tpye: String
    },
    name: {
        type: String
    },
    profile_picture: {
        type: String
    }
} , {timestamps: true})

// blog (post) schema for storing posts 
const Blog = new mongoose.Schema({
    author:{
        type: mongoose.SchemaTypes.ObjectId,
        ref: "user"
    },
    title: {
        type: String,
        required: true
    },
    body: {
        type: String,
        required: true
    },
    preview:{
        type: String,
        required: true
    },
    thumbnail: {
        type: Object({
            data: Buffer,
            contentType: String,
        }),
        default: null
    },
    tags: {
        type: [String]
    }
} , {timestamps: true})


// like collection
const Like = new mongoose.Schema({
    user: {
        type: mongoose.SchemaTypes.ObjectId,
        ref: 'user'
    },
    blog: {
        type: mongoose.SchemaTypes.ObjectId,
        ref: 'blog'
    }
})



// comment schema for blogs "user" field is who writes the comment and have a relation with users 
const Comment = new mongoose.Schema({
    user: {
        type: mongoose.SchemaTypes.ObjectId,
        ref: "user"
    },
    blog: {
        type: mongoose.SchemaTypes.ObjectId,
        ref: "blog"
    },
    body:{
        type: String,
        required: true
    },
    // replies:[]
} , {timestamps: true})
Comment.add({
    replies: [Comment]
})


const Follow = new mongoose.Schema({
    follower: {
        type: mongoose.SchemaTypes.ObjectId,
        ref: 'user'
    },
    following: {
        type: mongoose.SchemaTypes.ObjectId,
        ref: "user"
    }
},
{
    timestamps: true
})


User.pre('deleteOne' , async function (next) {
    const userId = this._conditions._id
    await mongoose.model("blog").deleteMany({author: userId})
    await mongoose.model("like").deleteMany({user: userId})
    await mongoose.model("comment").deleteMany({user: userId})
    await mongoose.model("follow").deleteMany({follower: userId})
    next()
})

Blog.pre('deleteOne' , async function (next) {
    const blogId = this._conditions._id
    console.log(blogId)
    await mongoose.model("comment").deleteMany({blog: blogId})
    await mongoose.model("like").deleteMany({blog: blogId})
    next()
})

module.exports = {
    UserSchema: mongoose.model("user" , User),
    BlogSchema: mongoose.model("blog" , Blog),
    LikeSchema: mongoose.model("like" , Like),
    CommentSchema: mongoose.model("comment" , Comment),
    TwitterUser: mongoose.model("twitterUser" , TwitterUser , "users"),
    FollowSchema: mongoose.model("follow" , Follow)
}